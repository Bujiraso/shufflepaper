#!/usr/bin/env bash
# test-runner
# Usage: $ test-runner TEST_CLASS_PATH
#  or just use ...
# Usage: $ ./make test TEST_CLASS_PATH

# Guard against running in dirty environments (but do not infinite loop)
if [[ $(env | wc -l) -gt 5 ]]; then
    if [[ ${#} -lt 1 || "${1}" != "--again" ]]; then
        echo "WARN: Test env is dirty. Re-running in empty env" > /dev/stderr
        env -i "${0}" --again "${@}"
        exit ${?}
    else
        echo "Infinite loop detected on hidden option. Repair env or script."
        exit -1
    fi
fi
# Move out re-run arg
test "${1}" == "--again" && shift

# Logs test case count
i=0
function logNewTest() {
    i=$((i + 1)) && echo "Executing test ${i}: ${1}"
}
export -f logNewTest

function classRunner() {
    retVal=
    for test in ${tests};  do
        logNewTest "${test}" && "${test}" && continue
        retVal=${?}
        echo "=== FAILURE: '${test}' test failed (return value ${retVal})"
    done
    return ${retVal}
}
export -f classRunner


TEST_DIR="$(readlink -f "$(dirname "${0}")/t/")"

testClass="$(readlink -f "${1}")"
if [[ ! -f "${testClass}" ]]; then
    echo "Cannot find test class" > /dev/stderr
    exit 35
elif [[ ! -x "${testClass}" ]]; then
    echo "Test class not executable" > /dev/stderr
    exit 98
elif [[ "$(readlink -f "$(dirname "${testClass}")")" != "${TEST_DIR}" ]]; then
    echo "Test not in test directory. Exiting to be safe" > /dev/stderr
    exit 172
fi

globalTestEnv="${TEST_DIR}/.testenv"
if [[ -f "${globalTestEnv}" ]]; then
    source "${globalTestEnv}"
else
    echo "Could not source global test env"
    exit 209
fi

testBasename=$(basename "${testClass}")
specificTestEnv="${TEST_DIR}/.${testBasename}-setup"
test -f "${specificTestEnv}" && source "${specificTestEnv}"

echo "Testing class: t/${testBasename}..."
source "${testClass}"
classRunner

"${TEST_DIR}/.teardown"
