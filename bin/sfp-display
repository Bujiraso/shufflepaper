#!/usr/bin/env bash
# sfp-display
# Changes the wallpaper for the current desktop session. Implemented for Cinnamon, Gnome and Mate
#  Copyright (C) 2015 - 2019 Bujiraso

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

subName="display"

function __sfp-display-help() {
    OPTIONS="centered scaled spanned zoom stretched wallpaper"
    cat <<EOS
Usage: sfp ${subName} FILE (OPTION)          Set the wallpaper to the given file
       sfp ${subName} (-o|--option) OPTION   Set the view mode of the wallpaper
           Argument can be one of: ${OPTIONS}
       sfp ${subName} (-h|--help)            Print this help message
EOS
}

#Check that the file is prefixed by "file://"
function __sfp_prefix-uri() {
    pfpath="${1}"
    if [[ ! "${pfpath}" = *"file://"* ]]; then
        _sfp-trace "Prepending file:// to ${pfpath}"
        pfpath="file://""$(readlink -f "${pfpath}")"
    fi
    echo "${pfpath}"
}
export -f __sfp_prefix-uri

function __sfp-display() {
    fpath="${1}"
    _sfp-trace "Using ${fpath} as background to set"
    # Determine desktop session and change wallpaper
    if pgrep cinnamon > /dev/null; then
        _sfp-trace "Setting cinnamon background"
        pfpath=$(__sfp_prefix-uri "${fpath}")
        # TODO: This won't always be DISPLAY=:0
        DISPLAY=:0 gsettings set org.cinnamon.desktop.background picture-uri "${pfpath}"
    elif pgrep mate-session > /dev/null; then
        _sfp-trace "Setting mate background"
        DISPLAY=:0 gsettings set org.mate.background picture-filename "${fpath}"
    elif pgrep 'gnome-shell$' > /dev/null; then
        _sfp-trace "Setting gnome background"
        if [[ -z ${DBUS_SESSION_BUS_ADDRESS+x} ]]; then
            export $(dbus-launch --return-with-session gnome-session)
        fi
        pfpath=$(__sfp_prefix-uri "${fpath}")
        DISPLAY=:0 gsettings set org.gnome.desktop.background picture-uri "${pfpath}"
    else
        echo >&2 "${subName}: Cannot read for session ${DESKTOP_SESSION}"
        return 3
    fi

    _sfp-dbug "$(date +%Y-%m-%d-%T): ${subName}: Wallpaper set to ${fpath}"
}

function __sfp-update-gnome-display-mode() {
    if [[ -z ${DBUS_SESSION_BUS_ADDRESS+x} ]]; then
        export $(dbus-launch --return-with-session gnome-session)
    fi
    DISPLAY=:0 gsettings set org.gnome.desktop.background picture-options "${1}"
}

function __sfp-option() {
    if [[ ${#} -ne 1 ]]; then
        _sfp-err "${subName}: --option argument requires only one argument, received $(($# - 1))"
        return 2
    fi
    option=${1}
    shift

    test ! -z ${option+set} && case "${option}" in
        "centered"|"scaled"|"spanned"|"zoom"|"stretched"|"wallpaper")
            _sfp-trace "Requesting DE (currently gnome...) to update display to ${option}"
            __sfp-update-gnome-display-mode "${option}"
            ;;
        *) #Invalid view option
            echo "${subName}: Invalid argument - ${option}" >&2
            return 1
            ;;
    esac
}

function __sfp-validate-file() {
    fpath=${1}
    _sfp-trace "Validating file '${fpath}' exists"
    wall=$(readlink -f "${fpath}")
    if [[ ${?} -ne 0 || ! -f "${wall}" ]]; then
        echo >&2 "${subName}: Could not find file for path: \"${fpath}\""
        return 2
    else
        _sfp-trace "Validated"
        echo ${wall}
    fi
}

function sfp-display () {
    if [[ ${#} -eq 0 ]]; then
        echo >&2 "${subName}: No args given. Exiting without change."
        __sfp-display-help
        return 1
    elif [[ ${#} -gt 2 ]]; then
        echo "Received too many arguments (${#})"
        __sfp-display-help
        return 2
    fi

    while true; do 
        case "${1}" in 
            -h | --help ) 
                __sfp-display-help
                return 0
                ;;
            -o | --option )
                __sfp-option "${2}"
                return ${?}
                ;;
            -- )
                shift
                break
                ;;
            * )
                break
                ;;
        esac
    done

    # Set wall {
    wall=$(__sfp-validate-file "${1}")
    validAns=${?}
    if [[ ${validAns} -ne 0 ]]; then
        return ${validAns}
    else
        shift
    fi
    _sfp-trace "Requesting wallpaper display for '${wall}'"
    __sfp-display "${wall}"
    displayAns=${?}
    if [[ ${displayAns} -ne 0 ]];then
        return ${displayAns}
    fi
    # }

    test ! -z ${1+set} && __sfp-option "${1}"
}
